/* File:      flrchange_module.flr
**
** Author(s): Michael Kifer
**
** Contact:   flora-users@lists.sourceforge.net
**
** Copyright (C) by
**      The Research Foundation of the State University of New York, 2017.
**
** Licensed under the Apache License, Version 2.0 (the "License");
** you may not use this file except in compliance with the License.
** You may obtain a copy of the License at
**
**      http://www.apache.org/licenses/LICENSE-2.0
**
** Unless required by applicable law or agreed to in writing, software
** distributed under the License is distributed on an "AS IS" BASIS,
** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
** See the License for the specific language governing permissions and
** limitations under the License.
**
**
*/



:- compiler_options{production=on}.
:- nontabled_module.
:- suppress_rule_signatures.

/*
   change_module_if_match(+?In,-?Out,+?ModToChange,+?NewMod)

   Change the module of ?In to ?NewMod  **IF** the module of ?In is ?ModToChange
   If the module of ?In is NOT ?ModToChange then don't change anything.

   If ?ModToChange is unbound then change the module of ?In unconditionally
   to ?NewMod.
*/

:- prolog{change_module_if_match/4}.

change_module_if_match(?T,?T,?_ModToChange,?_NewMod) :-
	isvar{?T},
	!.
change_module_if_match([],[],?_ModToChange,?_NewMod) :- !.
change_module_if_match([?L|?R],[?LM|?RM],?ModToChange,?NewMod) :-
	!,
	change_module_if_match(?L,?LM,?ModToChange,?NewMod),
	change_module_if_match(?R,?RM,?ModToChange,?NewMod).
change_module_if_match((?L,?R),(?LM,?RM),?ModToChange,?NewMod) :-
	!,
	change_module_if_match(?L,?LM,?ModToChange,?NewMod),
	change_module_if_match(?R,?RM,?ModToChange,?NewMod).
change_module_if_match((?L;?R),(?LM;?RM),?ModToChange,?NewMod) :-
	!,
	change_module_if_match(?L,?LM,?ModToChange,?NewMod),
	change_module_if_match(?R,?RM,?ModToChange,?NewMod).
change_module_if_match(?T,?TM,?ModToChange,?NewMod) :-
	is_flora_callable_literal(?T)@\prolog(flrwrapper),
	flora_change_module(?T,?TM,(?ModToChange,?NewMod),?NewMod,
	                    ['In ',?ModToChange,?T,
			     ': unexpected argument'])@\prolog(flrwrapper),
	!.
change_module_if_match(?T,?TM,?ModToChange,?NewMod) :-
        ?T ~ \naf ?Tnaf,
        !,
        change_module_if_match(?Tnaf,?TMnaf,?ModToChange,?NewMod),
        ?TM ~ \naf ?TMnaf.
change_module_if_match(?R,?RM,?ModToChange,?NewMod) :-
	?R ~ (?_H:-?_B),
        (?R =.. [FLSYSRULEUPDATE,?Id,?File,?Vars,?StmtNo,?Meta,?Head,?Body,
                                 ?HeadVars,?BdyVars,?DTVars,?H2BFront,?H2BBack,
                                 ?PreBody,?PostBody,?Defeat])@\plg,
	change_module_if_match(?Head,?HM,?ModToChange,?NewMod),
	change_module_if_match(?Body,?BM,?ModToChange,?NewMod),
        (?RM =.. [FLSYSRULEUPDATE,?Id,?File,?Vars,?StmtNo,?Meta,?HM,?BM,
                                  ?HeadVars,?BdyVars,?DTVars,?H2BFront,?H2BBack,
                                  ?PreBody,?PostBody,?Defeat])@\plg,
	!.
change_module_if_match(?_T,?_T,?_ModToChange,?_NewMod) :- \true.

